@page
@model Samples.Pages.OAuthExampleModel
@{
}

<h1>OAuth with ASP.NET Core and Amazon Cognito</h1>

<p>
    Cognito supports the OAuth 2.0 authorization framework to make authenticated REST API calls. To identify the authenticated user to an
    API a JSON Web Token (JWT) is generated by the OAuth provider, in this case Cognito, and passed as the <b>Authorization</b> header
    to the REST API. The format of the value for Authorization header is "<i>bearer &lt;jwt-token&gt;</i>".
</p>

<h2>Retrieving current user's JWT token.</h2>

<p>
    In an ASP.NET Core application a JWT token can be retrieved for the current logged in user by injecting ASP.NET Core's <b>UserManager&lt;CognitoUser&gt;</b> service.
    Using the <b>UserManager</b> service the <b>CognitoUser</b> object can be retrieved and the ID token can be retrieved. The ID token is used as the JWT token that can be used to
    make authenticated REST API calls.
</p>
<p>
    Here is the snippet of code that shows how to retrieve the current logged in users JWT token.
</p>
<pre><code>
public async Task OnGet()
{
    var cognitoUser = await _userManager.GetUserAsync(this.HttpContext.User);
    IsLoggedIn = cognitoUser != null;
    if (IsLoggedIn)
    {
        this.JwtToken = cognitoUser.SessionTokens.IdToken;
    }
}
</code></pre>


@if (Model.IsLoggedIn)
{
<p>This is the current logged in user's JWT token:</p>
<textarea disabled style="width: 100%; box-sizing: border-box;" rows="8">@Model.JwtToken</textarea>
}
else
{
<p><i>Log in to see current user's' JWT token.</i></p>
}

<h2>Configuring ASP.NET Core application to validate JWT tokens</h2>

<p>
    If an ASP.NET Core application contains API Controllers that require authentication with Cognito the JWT bearer authentication schema needs to be configured.
    The JWT authentication schema implementation is provided by the <b>Microsoft.AspNetCore.Authentication.JwtBearer</b> NuGet package.
    Configuration is typically done in the <b>Startup</b> class of an ASP.NET Core application with the <b>ConfigureServices</b> method.
</p>

<p>
    The code snippet below demonstrates how to add the JWT bearer authentication schema. The <b>JwtBearerDefaults.AuthenticationScheme</b> is passed into the <b>AddAuthentication</b> method.
    The <b>AddJwtBearer</b> extension method is used to configure what OAuth provider to validate the JWT token. Two settings are required for configuring the OAuth provider. The first setting is 
    the <b>Audience</b> which is configured to the Cognito application client id. The second setting is the <b>Authority</b> which is the https endpoint to the Cognito user pool that will 
    validate JWT token is valid.
</p>

<pre><code>
public void ConfigureServices(IServiceCollection services)
{
    services.AddCognitoIdentity();
    services.AddRazorPages();

    services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
        .AddJwtBearer(options =>
        {
            var region = Configuration["AWS:Region"];
            if (string.IsNullOrEmpty(region))
            {
                region = Amazon.Runtime.FallbackRegionFactory.GetRegionEndpoint().SystemName;
            }

            options.Audience = Configuration["AWS:UserPoolClientId"];
            options.Authority = $"https://cognito-idp.{region}.amazonaws.com/" + Configuration["AWS:UserPoolId"];
        });
}
</code></pre>